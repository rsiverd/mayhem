
# 1) run in ../test_extr
cd ~/NRES/mayhem/test_extr

# 2) create files in scratch folder if not present:
bash devel/test_full_set.sh

# 3) Extract stacked ThAr doubles and compare adjacent fibers to identify matches:
./mayhem-dumb-extract.py -S images/med_nres01_thar01_20181125_07d_06b_00a.fits.fz \
                         -L scratch/clean_med_nres01_tung01_20181125_07d_06b_00a.fits \
                         -T scratch/trace1_med_nres01_tung01_20181125_07d_06b_00a.fits \
                         -o derp.fits --fox
                           

# -----------------------------------------------------------------------

def range_inclusive(start, stop):
    return range(start, stop + 1)

# Test comparison for similarity:
def similarity(flx1, flx2, pctcut=75):
    cutoff1 = np.percentile(flx1, pctcut)
    cutoff2 = np.percentile(flx2, pctcut)
    keepers = (flx1 >= cutoff1) & (flx2 >= cutoff2)
    keepfrac = float(np.sum(keepers)) / float(keepers.size)
    #sys.stderr.write("np.sum(keepers): %d\n" % np.sum(keepers))
    #sys.stderr.write("keepfrac: %10.5f\n" % keepfrac)
    fratio = flx1[keepers] / flx2[keepers]
    med, sig = calc_ls_med_IQR(fratio)
    return (sig / med)
    #return (sig / med) / keepfrac
    #return med, sig

def correl_sim(flx1, flx2, pctcut=75):
    return np.sum(flx1 * flx2)

def overlapping_xpix(xpix1, xpix2):
    xleft  = max(xpix1[ 0], xpix2[ 0])
    xright = min(xpix1[-1], xpix2[-1])
    which1 = (xleft <= xpix1) & (xpix1 <= xright)
    which2 = (xleft <= xpix2) & (xpix2 <= xright)
    return (xleft, xright, which1, which2)


def check_order_match(fox1, fox2, pctcut=75, nudgemin=0, nudgemax=20):
    xpix1, ypix1, flx1 = fox1
    xpix2, ypix2, flx2 = fox2
    xleft, xright, which1, which2 = overlapping_xpix(xpix1, xpix2)
    sys.stderr.write("xpix1:  %s\n" % str(xpix1))
    sys.stderr.write("xpix2:  %s\n" % str(xpix2))
    sys.stderr.write("xleft:  %d\n" % xleft)
    sys.stderr.write("xright: %d\n" % xright)
    overlap_flx1 = flx1[which1]
    overlap_flx2 = flx2[which2]

    #sim_scores = []
    cor_scores = []
    for nn in range(nudgemin, nudgemax+1):
        #sim_scores.append(similarity(np.roll(overlap_flx1, nn), overlap_flx2))
        cor_scores.append(correl_sim(np.roll(overlap_flx1, nn), overlap_flx2))
    #best_offset = np.argmin(sim_scores)
    best_offset = np.argmax(cor_scores)
    return (best_offset, cor_scores[best_offset])
    #return (best_offset, sim_scores[best_offset], cor_scores)
    

# Normalize fox fluxes:
effectively_zero = 0.1
import copy
fox_working = copy.deepcopy(fox_results)
for xpix,ypix,fibflx in fox_working:
    fibflx /= np.median(fibflx)
    fibflx[(fibflx < effectively_zero)] = effectively_zero

fib6_flux = fox_working[6][2]
fib7_flux = fox_working[7][2]
fib8_flux = fox_working[8][2]
fib9_flux = fox_working[9][2]

clf()
plot(fib6_flux, label='fib6')
plot(fib7_flux, label='fib7')
plot(fib8_flux, label='fib8')
plot(fib9_flux, label='fib9')
legend()

ncomparisons = len(fox_working) - 1
match_scores = np.zeros(ncomparisons, dtype='float')
match_summary = []
for i in range(len(fox_working) - 1):
    sys.stderr.write("order: %3d\n" % i)
    mshift, mscore = check_order_match(fox_working[i], fox_working[i+1])
    match_scores[i] = mscore
    match_summary.append((mshift, mscore))

for i,things in enumerate(match_summary):
    sys.stderr.write("trace %d:%d --> %s\n" % (i, i+1, str(things)))

# resolve pairs in order of signal strength:
unpaired_trace = list(range(len(fox_working)))
possible_pairs = {(i,i+1):x for i,x in enumerate(match_summary)}
detected_pairs = {}
for botidx in np.argsort(match_scores)[::-1]:
    sys.stderr.write("botidx: %d\n" % botidx)
    prev_pair = (botidx - 1, botidx)
    this_pair = (botidx, botidx + 1)
    next_pair = (botidx + 1, botidx + 2)
    all_pairs = prev_pair, this_pair, next_pair
    all_items = (botidx - 1, botidx, botidx + 1)

    sys.stderr.write("this_pair: %s\n" % str(this_pair))
    if this_pair in possible_pairs.keys():
        #sys.stderr.write("pair still live!\n")
        # Grab pair information, rule out overlapping matches:
        detected_pairs[this_pair] = possible_pairs[this_pair]
        for toss in all_pairs:
            possible_pairs.pop(toss, None)
            pass

        # Update list of unpaired orders:
        for tnum in botidx, botidx+1:
            if tnum in unpaired_trace:
                unpaired_trace.remove(tnum)
                pass
            pass

        pass
    else:
        sys.stderr.write("PAIR NOT AVAILABLE!!\n")
        pass
    pass



# Correct answers (thar01) include:
# (0, 1)
# (2, 3)
# (4, 5)
# (6, 7)
# (8, 9)

# Correct answers (thar12) include:
# (?,  0)
# (3,  4)
# (5,  6)
# (7,  8)
# (9, 10)

